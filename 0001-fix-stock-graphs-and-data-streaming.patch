From 44b9a26cfbca50737278d089d93aafe661c86882 Mon Sep 17 00:00:00 2001
From: neutronahmed <bazubairu@st.ug.edu.gh>
Date: Tue, 19 Sep 2023 21:41:50 +0000
Subject: [PATCH] fix: stock graphs and data streaming

---
 package.json  |  2 +-
 src/App.tsx   | 23 +++++++++++++++++------
 src/Graph.tsx | 18 ++++++++++++++----
 3 files changed, 32 insertions(+), 11 deletions(-)

diff --git a/package.json b/package.json
index ca234e9..39a6837 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
     "puppeteer": "^1.19.0",
     "react": "^16.9.0",
     "react-dom": "^16.9.0",
-    "react-scripts": "2.1.3"
+    "react-scripts": "^5.0.1"
   },
   "scripts": {
     "start": "react-scripts --openssl-legacy-provider start",
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..e393fe6 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false
     };
   }
 
@@ -29,18 +31,27 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let count = 0;
+    const interval = setInterval(()=>{
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state data and showGraph boolean to true
+        this.setState({ data: serverResponds, showGraph:true });
+      });
+      count++;
+      if (count > 1000){
+        // Clearinterval to stop setinterval from running
+        clearInterval(interval)
+      }
+    }, 100)
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..78c0978 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -33,7 +33,17 @@ class Graph extends Component<IProps, {}> {
   componentDidMount() {
     // Get element to attach the table from the DOM.
     const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    elem.setAttribute('view', 'y_line')
+    elem.setAttribute('column-pivots', '["stock"]')
+    elem.setAttribute('row-pivots','["timestamp"]')
+    elem.setAttribute('columns','["top_ask_price"]')
+    elem.setAttribute('aggregrates', `
+    {"stock": "distinct count"
+    top_ask_price: "avg"
+    top_bid_price: "avg"
+    "timestamp": "distinct count"
+    }
+    `)
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
@@ -61,8 +71,8 @@ class Graph extends Component<IProps, {}> {
         // Format the data from ServerRespond to the schema
         return {
           stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
+          top_ask_price: (el.top_ask && el.top_ask.price) || 0,
+          top_bid_price: (el.top_bid && el.top_bid.price) || 0,
           timestamp: el.timestamp,
         };
       }));
-- 
2.42.0.windows.2

